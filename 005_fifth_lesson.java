Какие из пяти принципов повторного использования модуля поддерживаются в используемом вами языке программирования?

1. Новый модуль может задавать некоторый базовый тип, который потенциально должен допускать параметризацию другими типами (обобщённые типы, типы-генерики);
В целом в java многие модули задают тип, как например коллекции (List <T>). Можно создавать дженерики и использовать интерфейсы для обобщения. 

2. Новый модуль может объединять несколько функций, которые активно обращаются друг к другу;
Этот пункт также реализован в java, например модули связанные с I/O или с многопоточностью, они реализованы в общих пакетах

3. Новый модуль может входить в семейство модулей, ориентированных на решение некоторой общей задачи, которую не удаётся решить с помощью одного модуля;
В целом в java повсеместно много модулей входят в семейство модулей.

4. Новый модуль может предлагать конкретную реализацию родительского модуля, которая должна выбираться динамически (полиморфно) -- например, реализация обобщённого типа для конкретного типа-параметра;
В прямом значении в Java данный принцип не поддерживается(прямой конкретной реализации нет), однако поддерживается возможность осуществлять это косвенным образом, черед внедрение зависимостей

5. Новый модуль может интегрировать общее поведение нескольких модулей, которые различаются лишь деталями.
В целом также встречается в java. Возможно одним из примеров будет Stream API. 
