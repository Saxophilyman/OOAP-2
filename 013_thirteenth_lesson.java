Пожалуй первое задание в соответсветствии с которым Java не может дать хотя бы половины требуемого по условиям.
Кроме задания про множественное наследование.

Итак, заполню немного теорией.
Придерживаться как минимум рекомендательной системы: 
  оформлять компоненты классов, которые нельзя скрыть физически, но желательно скрыть от внешнего мира, исходя из принципов проектирования, как рекомендательно скрытые.

  Всего существует четыре варианта скрытия метода:
1. метод публичен в родительском классе А и публичен в его потомке B;
2. метод публичен в родительском классе А и скрыт в его потомке B;
3. метод скрыт в родительском классе А и публичен в его потомке B;
4. метод скрыт в родительском классе А и скрыт в его потомке B.

Принцип скрытия: в каждом классе публичны только те методы, которые входят в спецификацию соответствующего АТД.

Говоря про Java надо помнить следующее
 - Java не разрешает понижать видимость при переопределении метода. То есть public нельзя переопределить как private.
 - В Java методы не наследуются, если они private — в этом случае в дочернем классе можно определить новый метод с таким же именем, но это не переопределение, а новый метод.
 - Методы final нельзя переопределять.
 - Методы static не переопределяются, а скрываются (shadowing).

 - Можно повысить уровень доступа. Например, метод protected можно переопределить как public.

Соответственно 
  1 вариант возможен, это и будет переопределением
  class Parent { public void greet() {} }
  class Child extends Parent { @Override public void greet() {} }
  2 вариант недоступен

  про 3 И 4 вариант, если говорить в вариантах видимости private/public 
    по синтаксису они возможны, но по факту это будут новые методы

  если же говорить в вариантах protected/public 3 и 4 варианты вполне допустимы
   class Parent { protected void doWork() {} }
   class Child extends Parent { @Override public void doWork() {} }

   class Parent { protected void doWork() {} }
   class Child extends Parent { @Override protected void doWork() {} }
